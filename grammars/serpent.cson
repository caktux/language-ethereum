'scopeName': 'source.serpent'
'name': 'Serpent'
'fileTypes': [
  'se'
  'ser'
  'serpent'
  'sm'
]
'firstLineMatch': '^#!/.*\\bserpent[\\d\\.]*\\b'
'patterns': [
  {
    'begin': '(^[ \\t]+)?(?=#)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.serpent'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.serpent'
        'end': '\\n'
        'name': 'comment.line.number-sign.serpent'
      }
    ]
  }
  {
    'begin': '(^[ \\t]+)?(?=//)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.serpent'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.serpent'
        'end': '\\n'
        'name': 'comment.line.number-sign.serpent'
      }
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.serpent'
        'end': '\\n'
        'name': 'comment.line.double-slash.serpent'
      }
    ]
  }
  {
    'match': '\\b(?i:(0x\\h*)L)'
    'name': 'constant.numeric.integer.long.hexadecimal.serpent'
  }
  {
    'match': '\\b(?i:(0x\\h*))'
    'name': 'constant.numeric.integer.hexadecimal.serpent'
  }
  {
    'match': '\\b(?i:(0o?[0-7]+)L)'
    'name': 'constant.numeric.integer.long.octal.serpent'
  }
  {
    'match': '\\b(?i:(0o?[0-7]+))'
    'name': 'constant.numeric.integer.octal.serpent'
  }
  {
    'match': '\\b(?i:(0b[01]+)L)',
    'name': 'constant.numeric.integer.long.binary.serpent'
  }
  {
    'match': '\\b(?i:(0b[01]+))',
    'name': 'constant.numeric.integer.binary.serpent'
  }
  {
    'match': '\\b(?i:(((\\d+(\\.(?=[^a-zA-Z_])\\d*)?|(?<=[^0-9a-zA-Z_])\\.\\d+)(e[\\-\\+]?\\d+)?))J)'
    'name': 'constant.numeric.complex.serpent'
  }
  {
    'match': '\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])'
    'name': 'constant.numeric.float.serpent'
  }
  {
    'match': '(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))'
    'name': 'constant.numeric.float.serpent'
  }
  {
    'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
    'name': 'constant.numeric.float.serpent'
  }
  {
    'match': '\\b(?i:([1-9]+[0-9]*|0)L)'
    'name': 'constant.numeric.integer.long.decimal.serpent'
  }
  {
    'match': '\\b([1-9]+[0-9]*|0)'
    'name': 'constant.numeric.integer.decimal.serpent'
  }
  {
    'captures':
      '1':
        'name': 'storage.modifier.extern.serpent'
    'begin': '^(extern)\\s+\\w+\\:\\s*'
    'end': '((?=#)|(?=//)|(?=\n))'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.list.begin.serpent'
          '2':
            'name': 'support.function.extern.serpent'
        'match': '(\\[|,)\\s*(\\w+)\\:\\['
      }
      {
        'captures':
          '1':
            'name': 'support.type.array.serpent'
        'match': '(int256\\[\\])'
      }
      {
        'captures':
          '1':
            'name': 'constant.numeric.integer.serpent'
        'match': '(int256)'
      }
      {
        'captures':
          '1':
            'name': 'string.unquoted.language.serpent'
        'match': '(bytes)'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'storage.modifier.event.serpent'
    'begin': '^(event)\\s+\\w+\\('
    'end': '((?=#)|(?=//)|(?=\n))'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'support.type.indexed.serpent'
        'match': '\\:(indexed)'
      }
    ]
  }
  # {
  #   'captures':
  #     '1':
  #       'name': 'storage.modifier.global.serpent'
  #   'match': '\\b(global)\\b'
  # }
  # {
  #   'captures':
  #     '1':
  #       'name': 'storage.modifier.nonlocal.serpent'
  #   'match': '\\b(nonlocal)\\b'
  # }
  {
    'captures':
      '1':
        'name': 'keyword.control.data.serpent'
      '2':
        'name': 'keyword.control.extern.serpent'
      '3':
        'name': 'keyword.control.macro.serpent'
      '4':
        'name': 'keyword.control.event.serpent'
    'match': '\\b(?:(data)|(extern)|(macro)|(event))\\b'
  }
  {
    'comment': 'keywords that delimit flow conditionals'
    'name': 'keyword.control.conditional.serpent'
    'match': '\\b(if|elif|else|unless)\\b'
  }
  # {
  #   'comment': 'keywords that delimit an exception'
  #   'name': 'keyword.control.exception.serpent'
  #   'match': '\\b(except|finally|try|raise)\\b'
  # }
  {
    'comment': 'keywords that delimit loops'
    'name': 'keyword.control.repeat.serpent'
    'match': '\\b(until|while)\\b'
  }
  {
    'comment': 'keywords that alter flow from within a block'
    'name': 'keyword.control.statement.serpent'
    'match': '\\b(with|return|stop)\\b'
  }
  {
    'comment': 'keyword operators that evaluate to True or False'
    'match': '\\b(and|not|or)\\b'
    'name': 'keyword.operator.logical.serpent'
  }
  {
    'captures':
      '1':
        'name': 'keyword.other.serpent'
    'comment': 'keywords that haven\'t fit into other groups (yet).'
    'match': '\\b(as|assert)\\b'
  }
  {
    'match': '<>'
    'name': 'invalid.deprecated.operator.serpent'
  }
  {
    'match': '<\\=|>\\=|\\=\\=|<|>|\\!\\='
    'name': 'keyword.operator.comparison.serpent'
  }
  {
    'match': '\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|&\\=|\\|\\=|\\^\\=|>>\\=|<<\\=|\\*\\*\\='
    'name': 'keyword.operator.assignment.augmented.serpent'
  }
  {
    'match': '\\+|\\-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~'
    'name': 'keyword.operator.arithmetic.serpent'
  }
  {
    'match': '\\='
    'name': 'keyword.operator.assignment.serpent'
  }
  # {
  #   'begin': '^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*\\:)'
  #   'beginCaptures':
  #     '1':
  #       'name': 'storage.type.class.serpent'
  #   'contentName': 'entity.name.type.class.serpent'
  #   'end': '\\s*(:)'
  #   'endCaptures':
  #     '1':
  #       'name': 'punctuation.section.class.begin.serpent'
  #   'name': 'meta.class.old-style.serpent'
  #   'patterns': [
  #     {
  #       'include': '#entity_name_class'
  #     }
  #   ]
  # }
  # {
  #   'begin': '^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*\\()'
  #   'beginCaptures':
  #     '1':
  #       'name': 'storage.type.class.serpent'
  #   'end': '(\\))\\s*(?:(\\:)|(.*$\\n?))'
  #   'endCaptures':
  #     '1':
  #       'name': 'punctuation.definition.inheritance.end.serpent'
  #     '2':
  #       'name': 'punctuation.section.class.begin.serpent'
  #     '3':
  #       'name': 'invalid.illegal.missing-section-begin.serpent'
  #   'name': 'meta.class.serpent'
  #   'patterns': [
  #     {
  #       'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
  #       'contentName': 'entity.name.type.class.serpent'
  #       'end': '(?![A-Za-z0-9_])'
  #       'patterns': [
  #         {
  #           'include': '#entity_name_class'
  #         }
  #       ]
  #     }
  #     {
  #       'begin': '(\\()'
  #       'beginCaptures':
  #         '1':
  #           'name': 'punctuation.definition.inheritance.begin.serpent'
  #       'contentName': 'meta.class.inheritance.serpent'
  #       'end': '(?=\\)|:)'
  #       'patterns': [
  #         {
  #           'begin': '(?<=\\(|,)\\s*'
  #           'contentName': 'entity.other.inherited-class.serpent'
  #           'end': '\\s*(?:(,)|(?=\\)))'
  #           'endCaptures':
  #             '1':
  #               'name': 'punctuation.separator.inheritance.serpent'
  #           'patterns': [
  #             {
  #               'include': '$self'
  #             }
  #           ]
  #         }
  #       ]
  #     }
  #   ]
  # }
  # {
  #   'begin': '^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9])'
  #   'beginCaptures':
  #     '1':
  #       'name': 'storage.type.class.serpent'
  #   'end': '(\\()|(\\s*$\\n?|#.*$\\n?)'
  #   'endCaptures':
  #     '1':
  #       'name': 'punctuation.definition.inheritance.begin.serpent'
  #     '2':
  #       'name': 'invalid.illegal.missing-inheritance.serpent'
  #   'name': 'meta.class.serpent'
  #   'patterns': [
  #     {
  #       'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
  #       'contentName': 'entity.name.type.class.serpent'
  #       'end': '(?![A-Za-z0-9_])'
  #       'patterns': [
  #         {
  #           'include': '#entity_name_function'
  #         }
  #       ]
  #     }
  #   ]
  # }
  {
    'begin': '^\\s*(def)\\s+(?=[A-Za-z_][A-Za-z0-9_]*\\s*\\()'
    'beginCaptures':
      '1':
        'name': 'storage.type.function.serpent'
    'end': '(\\))\\s*(?:(\\:)|(.*$\\n?))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.parameters.end.serpent'
      '2':
        'name': 'punctuation.section.function.begin.serpent'
      '3':
        'name': 'invalid.illegal.missing-section-begin.serpent'
    'name': 'meta.function.serpent'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.function.serpent'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_function'
          }
        ]
      }
      {
        'begin': '(\\()'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.parameters.begin.serpent'
        'contentName': 'meta.function.parameters.serpent'
        'end': '(?=\\)\\s*\\:)'
        'patterns': [
          {
            'include': '#keyword_arguments'
          }
          {
            'captures':
              '1':
                'name': 'variable.parameter.function.serpent'
              '2':
                'name': 'punctuation.separator.parameters.serpent'
            'match': '\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[\\n\\)]))'
          }
        ]
      }
    ]
  }
  {
    'begin': '^\\s*(def)\\s+(?=[A-Za-z_][A-Za-z0-9_]*)'
    'beginCaptures':
      '1':
        'name': 'storage.type.function.serpent'
    'end': '(\\()|\\s*($\\n?|#.*$\\n?)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.parameters.begin.serpent'
      '2':
        'name': 'invalid.illegal.missing-parameters.serpent'
    'name': 'meta.function.serpent'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.function.serpent'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_function'
          }
        ]
      }
    ]
  }
  # {
  #   'begin': '(lambda)(?=\\s+)'
  #   'beginCaptures':
  #     '1':
  #       'name': 'storage.type.function.inline.serpent'
  #   'end': '(\\:)'
  #   'endCaptures':
  #     '1':
  #       'name': 'punctuation.definition.parameters.end.serpent'
  #     '2':
  #       'name': 'punctuation.section.function.begin.serpent'
  #     '3':
  #       'name': 'invalid.illegal.missing-section-begin.serpent'
  #   'name': 'meta.function.inline.serpent'
  #   'patterns': [
  #     {
  #       'begin': '\\s+'
  #       'contentName': 'meta.function.inline.parameters.serpent'
  #       'end': '(?=\\:)'
  #       'patterns': [
  #         {
  #           'include': '#keyword_arguments'
  #         }
  #         {
  #           'captures':
  #             '1':
  #               'name': 'variable.parameter.function.serpent'
  #             '2':
  #               'name': 'punctuation.separator.parameters.serpent'
  #           'match': '\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[\\n\\)\\:]))'
  #         }
  #       ]
  #     }
  #   ]
  # }
  # {
  #   'begin': '^\\s*(?=@\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\()'
  #   'comment': 'a decorator may be a function call which returns a decorator.'
  #   'end': '(\\))'
  #   'endCaptures':
  #     '1':
  #       'name': 'punctuation.definition.arguments.end.serpent'
  #   'name': 'meta.function.decorator.serpent'
  #   'patterns': [
  #     {
  #       'begin': '(?=(@)\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()'
  #       'beginCaptures':
  #         '1':
  #           'name': 'punctuation.definition.decorator.serpent'
  #       'contentName': 'entity.name.function.decorator.serpent'
  #       'end': '(?=\\s*\\()'
  #       'patterns': [
  #         {
  #           'include': '#dotted_name'
  #         }
  #       ]
  #     }
  #     {
  #       'begin': '(\\()'
  #       'beginCaptures':
  #         '1':
  #           'name': 'punctuation.definition.arguments.begin.serpent'
  #       'contentName': 'meta.function.decorator.arguments.serpent'
  #       'end': '(?=\\))'
  #       'patterns': [
  #         {
  #           'include': '#keyword_arguments'
  #         }
  #         {
  #           'include': '$self'
  #         }
  #       ]
  #     }
  #   ]
  # }
  # {
  #   'begin': '^\\s*(?=@\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)'
  #   'contentName': 'entity.name.function.decorator.serpent'
  #   'end': '(?=\\s|$\\n?|#)'
  #   'name': 'meta.function.decorator.serpent'
  #   'patterns': [
  #     {
  #       'begin': '(?=(@)\\s*[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*)'
  #       'beginCaptures':
  #         '1':
  #           'name': 'punctuation.definition.decorator.serpent'
  #       'end': '(?=\\s|$\\n?|#)'
  #       'patterns': [
  #         {
  #           'include': '#dotted_name'
  #         }
  #       ]
  #     }
  #   ]
  # }
  {
    'begin': '(?<=\\)|\\])\\s*(\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.arguments.begin.serpent'
    'contentName': 'meta.function-call.arguments.serpent'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.arguments.end.serpent'
    'name': 'meta.function-call.serpent'
    'patterns': [
      {
        'include': '#keyword_arguments'
      }
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\()'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.arguments.end.serpent'
    'name': 'meta.function-call.serpent'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()'
        'end': '(?=\\s*\\()'
        'patterns': [
          {
            'include': '#dotted_name'
          }
        ]
      }
      {
        'begin': '(\\()'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.arguments.begin.serpent'
        'contentName': 'meta.function-call.arguments.serpent'
        'end': '(?=\\))'
        'patterns': [
          {
            'include': '#keyword_arguments'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\[)'
    'end': '(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.arguments.end.serpent'
    'name': 'meta.item-access.serpent'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\[)'
        'end': '(?=\\s*\\[)'
        'patterns': [
          {
            'include': '#dotted_name'
          }
        ]
      }
      {
        'begin': '(\\[)'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.arguments.begin.serpent'
        'contentName': 'meta.item-access.arguments.serpent'
        'end': '(?=\\])'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?<=\\)|\\])\\s*(\\[)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.arguments.begin.serpent'
    'contentName': 'meta.item-access.arguments.serpent'
    'end': '(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.arguments.end.serpent'
    'name': 'meta.item-access.serpent'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'storage.type.function.serpent'
    'match': '\\b(def)\\b'
  }
  # {
  #   'captures':
  #     '1':
  #       'name': 'storage.type.class.serpent'
  #   'match': '\\b(class)\\b'
  # }
  {
    'include': '#line_continuation'
  }
  {
    'include': '#language_variables'
  }
  # {
  #   'match': '\\b(None|True|False|Ellipsis|NotImplemented)\\b'
  #   'name': 'constant.language.serpent'
  # }
  {
    'include': '#string_quoted_single'
  }
  {
    'include': '#string_quoted_double'
  }
  {
    'include': '#dotted_name'
  }
  {
    'begin': '(\\()'
    'end': '(\\))'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.list.begin.serpent'
      '2':
        'name': 'meta.empty-list.serpent'
      '3':
        'name': 'punctuation.definition.list.end.serpent'
    'match': '(\\[)(\\s*(\\]))\\b'
  }
  {
    'begin': '(\\[)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.list.begin.serpent'
    'end': '(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.list.end.serpent'
    'name': 'meta.structure.list.serpent'
    'patterns': [
      {
        'begin': '(?<=\\[|\\,)\\s*(?![\\],])'
        'contentName': 'meta.structure.list.item.serpent'
        'end': '\\s*(?:(,)|(?=\\]))'
        'endCaptures':
          '1':
            'name': 'punctuation.separator.list.serpent'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
  # {
  #   'captures':
  #     '1':
  #       'name': 'punctuation.definition.tuple.begin.serpent'
  #     '2':
  #       'name': 'meta.empty-tuple.serpent'
  #     '3':
  #       'name': 'punctuation.definition.tuple.end.serpent'
  #   'match': '(\\()(\\s*(\\)))'
  #   'name': 'meta.structure.tuple.serpent'
  # }
  # {
  #   'captures':
  #     '1':
  #       'name': 'punctuation.definition.dictionary.begin.serpent'
  #     '2':
  #       'name': 'meta.empty-dictionary.serpent'
  #     '3':
  #       'name': 'punctuation.definition.dictionary.end.serpent'
  #   'match': '(\\{)(\\s*(\\}))'
  #   'name': 'meta.structure.dictionary.serpent'
  # }
  # {
  #   'begin': '(\\{)'
  #   'beginCaptures':
  #     '1':
  #       'name': 'punctuation.definition.dictionary.begin.serpent'
  #   'end': '(\\})'
  #   'endCaptures':
  #     '1':
  #       'name': 'punctuation.definition.dictionary.end.serpent'
  #   'name': 'meta.structure.dictionary.serpent'
  #   'patterns': [
  #     {
  #       'begin': '(?<=\\{|\\,|^)\\s*(?![\\},])'
  #       'contentName': 'meta.structure.dictionary.key.serpent'
  #       'end': '\\s*(?:(?=\\})|(\\:))'
  #       'endCaptures':
  #         '1':
  #           'name': 'punctuation.separator.valuepair.dictionary.serpent'
  #       'patterns': [
  #         {
  #           'include': '$self'
  #         }
  #       ]
  #     }
  #     {
  #       'begin': '(?<=\\:|^)\\s*'
  #       'contentName': 'meta.structure.dictionary.value.serpent'
  #       'end': '\\s*(?:(?=\\})|(,))'
  #       'endCaptures':
  #         '1':
  #           'name': 'punctuation.separator.dictionary.serpent'
  #       'patterns': [
  #         {
  #           'include': '$self'
  #         }
  #       ]
  #     }
  #   ]
  # }
]
'repository':
  # 'builtin_exceptions':
  #   'match': '(?x)\\b(\n\t\t\t\t(\n\t\t\t\t\tArithmetic|Assertion|Attribute|BlockingIO|BrokenPipe|Buffer|ChildProcess|\n\t\t\t\t\tConnection(Aborted|Refused|Reset)?|EOF|Environment|FileExists|\n\t\t\t\t\tFileNotFound|FloatingPoint|Interrupted|IO|IsADirectoryError|\n\t\t\t\t\tImport|Indentation|Index|Key|Lookup|Memory|Name|NotADirectory|\n\t\t\t\t\tNotImplemented|OS|Overflow|Permission|ProcessLookup|Reference|\n\t\t\t\t\tRuntime|Standard|Syntax|System|Tab|Timeout|Type|UnboundLocal|\n\t\t\t\t\tUnicode(Encode|Decode|Translate)?|Value|VMS|Windows|ZeroDivision\n\t\t\t\t)Error|\n\t\t\t\t((Pending)?Deprecation|Runtime|Syntax|User|Future|Import|Unicode|Bytes)?Warning|\n\t\t\t\t(Base)?Exception|\n\t\t\t\tSystemExit|StopIteration|NotImplemented|KeyboardInterrupt|GeneratorExit\n\t\t\t)\\b'
  #   'name': 'support.type.exception.serpent'
  'builtin_functions':
    'match': '(?x)\\b(\n\t\t\t\talloc|array|array_lit|call|callcode|create|declare|fun|get|getch|import|inset|invalid|len|load|log|mcopy|min|max|outer|ref|send|save|set|setch|seq|slice|text|transfer|suicide|ecrecover|sha256|ripemd160|sha3\n\t\t\t)\\b'
    'name': 'support.function.builtin.serpent'
  'builtin_types':
    'match': '(?x)\\b(\n\t\t\t\tarr|bytes|chars|int|items|str|string|words\n\t\t\t)\\b'
    'name': 'support.type.serpent'
  'constant_placeholder':
    'match': '(?i:(%(\\([a-z_]+\\))?#?0?\\-?[ ]?\\+?([0-9]*|\\*)(\\.([0-9]*|\\*))?([hL][a-z]|[a-z%]))|(\\{([!\\[\\].:\\w ]+)?\\}))'
    'name': 'constant.other.placeholder.serpent'
  'special_variables':
    'match': '(?x)\\b(\n\t\t\t\ttx\.origin|tx\.gasprice|msg\.gas|msg\.sender|msg\.value|\.balance|block\.coinbase|block\.timestamp|block\.prevhash|block\.difficulty|block\.number|block\.gaslimit\n\t\t\t)\\b'
    'name': 'support.variable.special.serpent'
  'any_method':
    'match': '[A-Za-z_][A-Za-z0-9_]*(?=\\()'
    'name': 'support.function.any-method.serpent'
  'docstrings':
    'patterns': [
      {
        'begin': '^\\s*(?=[uU]?[rR]?""")'
        'end': '(?<=""")'
        'name': 'comment.block.serpent'
        'patterns': [
          {
            'include': '#string_quoted_double'
          }
        ]
      }
      {
        'begin': '^\\s*(?=[uU]?[rR]?\'\'\')'
        'end': '(?<=\'\'\')'
        'name': 'comment.block.serpent'
        'patterns': [
          {
            'include': '#string_quoted_single'
          }
        ]
      }
    ]
  'dotted_name':
    'begin': '(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*)'
    'end': '(?![A-Za-z0-9_\\.])'
    'patterns': [
      {
        'begin': '(\\.)(?=[A-Za-z_][A-Za-z0-9_]*)'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          # {
          #   'include': '#magic_function_names'
          # }
          # {
          #   'include': '#magic_variable_names'
          # }
          {
            'include': '#illegal_names'
          }
          {
            'include': '#any_method'
          }
          {
            'include': '#generic_names'
          }
        ]
      }
      {
        'begin': '(?<!\\.)(?=[A-Za-z_][A-Za-z0-9_]*)'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#builtin_functions'
          }
          {
            'include': '#builtin_types'
          }
          {
            'include': '#builtin_exceptions'
          }
          {
            'include': '#illegal_names'
          }
          # {
          #   'include': '#magic_function_names'
          # }
          # {
          #   'include': '#magic_variable_names'
          # }
          {
            'include': '#language_variables'
          }
          {
            'include': '#special_variables'
          }
          {
            'include': '#macro_variables'
          }
          {
            'include': '#any_method'
          }
          {
            'include': '#generic_names'
          }
        ]
      }
    ]
  'entity_name_class':
    'patterns': [
      {
        'include': '#illegal_names'
      }
      {
        'include': '#generic_names'
      }
    ]
  'entity_name_function':
    'patterns': [
      # {
      #   'include': '#magic_function_names'
      # }
      {
        'include': '#illegal_names'
      }
      {
        'include': '#generic_names'
      }
    ]
  'escaped_char':
    'captures':
      '1':
        'name': 'constant.character.escape.hex.serpent'
      '2':
        'name': 'constant.character.escape.octal.serpent'
      '3':
        'name': 'constant.character.escape.newline.serpent'
      '4':
        'name': 'constant.character.escape.backlash.serpent'
      '5':
        'name': 'constant.character.escape.double-quote.serpent'
      '6':
        'name': 'constant.character.escape.single-quote.serpent'
      '7':
        'name': 'constant.character.escape.bell.serpent'
      '8':
        'name': 'constant.character.escape.backspace.serpent'
      '9':
        'name': 'constant.character.escape.formfeed.serpent'
      '10':
        'name': 'constant.character.escape.linefeed.serpent'
      '11':
        'name': 'constant.character.escape.return.serpent'
      '12':
        'name': 'constant.character.escape.tab.serpent'
      '13':
        'name': 'constant.character.escape.vertical-tab.serpent'
    'match': '(\\\\x[0-9A-F]{2})|(\\\\[0-7]{3})|(\\\\\\n)|(\\\\\\\\)|(\\\\\\")|(\\\\\')|(\\\\a)|(\\\\b)|(\\\\f)|(\\\\n)|(\\\\r)|(\\\\t)|(\\\\v)'
  'escaped_unicode_char':
    'captures':
      '1':
        'name': 'constant.character.escape.unicode.16-bit-hex.serpent'
      '2':
        'name': 'constant.character.escape.unicode.32-bit-hex.serpent'
      '3':
        'name': 'constant.character.escape.unicode.name.serpent'
    'match': '(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})'
  'function_name':
    'patterns': [
      # {
      #   'include': '#magic_function_names'
      # }
      # {
      #   'include': '#magic_variable_names'
      # }
      {
        'include': '#builtin_exceptions'
      }
      {
        'include': '#builtin_functions'
      }
      {
        'include': '#builtin_types'
      }
      {
        'include': '#generic_names'
      }
    ]
  'generic_names':
    'match': '[A-Za-z_][A-Za-z0-9_]*'
  'illegal_names':
    'match': '\\b(and|assert|data|def|elif|else|event|extern|if|macro|not|or|return|stop|unless|while|with|alloc|array|array_lit|call|callcode|create|declare|fun|get|getch|import|inset|invalid|len|load|log|mcopy|min|max|outer|ref|send|save|set|setch|seq|slice|text|transfer|suicide|ecrecover|sha256|ripemd160|sha3)\\b'
    'name': 'invalid.illegal.name.serpent'
  'keyword_arguments':
    'begin': '\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(=)(?!=)'
    'beginCaptures':
      '1':
        'name': 'variable.parameter.function.serpent'
      '2':
        'name': 'keyword.operator.assignment.serpent'
    'end': '\\s*(?:(,)|(?=$\\n?|[\\)\\:]))'
    'endCaptures':
      '1':
        'name': 'punctuation.separator.parameters.serpent'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'language_variables':
    'match': '\\b(self)\\b'
    'name': 'variable.language.serpent'
  'line_continuation':
    'captures':
      '1':
        'name': 'punctuation.separator.continuation.line.serpent'
      '2':
        'name': 'invalid.illegal.unexpected-text.serpent'
    'match': '(\\\\)(.*)$\\n?'
  # 'magic_function_names':
  #   'comment': 'these methods have magic interpretation by serpent and are generally called indirectly through syntactic constructs'
  #   'match': '(?x)\\b(__(?:abs|add|and|bool|bytes|call|cmp|coerce|complex|contains|del|delattr|delete|delitem|delslice|dir|div|divmod|enter|eq|exit|float|floordiv|format|ge|get|getattr|getattribute|getitem|getslice|gt|hash|hex|iadd|iand|idiv|ifloordiv|ilshift|imatmul|imod|imul|index|init|instancecheck|int|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|length_hint|long|lshift|lt|matmul|missing|mod|mul|ne|neg|next|new|nonzero|oct|or|pos|pow|radd|rand|rdiv|rdivmod|repr|reversed|rfloordiv|rlshift|rmatmul|rmod|rmul|ror|round|rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|setslice|str|sub|subclasscheck|truediv|unicode|xor)__)\\b'
  #   'name': 'support.function.magic.serpent'
  # 'magic_variable_names':
  #   'comment': 'magic variables which a class/module may have.'
  #   'match': '\\b__(all|bases|class|debug|dict|doc|file|members|metaclass|methods|name|slots|weakref)__\\b'
  #   'name': 'support.variable.magic.serpent'
  'macro_variables':
    'match': '(?<=\\$)[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*'
    'name': 'variable.interpolation.macro.serpent'
  'regular_expressions':
    'comment': 'Changed disabled to 1 to turn off syntax highlighting in “r” strings.'
    'disabled': 0
    'patterns': [
      {
        'include': 'source.regexp.serpent'
      }
    ]
  'string_quoted_double':
    'patterns': [
      {
        'begin': '([uU]r)(""")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted unicode-raw string'
        'end': '((?<=""")(")""|""")'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
        'name': 'string.quoted.double.block.unicode-raw-regex.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
          {
            'include': '#regular_expressions'
          }
        ]
      }
      {
        'begin': '([uU]R)(""")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted unicode-raw string without regular expression highlighting'
        'end': '((?<=""")(")""|""")'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
        'name': 'string.quoted.double.block.unicode-raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '(r)(""")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double quoted raw string'
        'end': '((?<=""")(")""|""")'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
        'name': 'string.quoted.double.block.raw-regex.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
          {
            'include': '#regular_expressions'
          }
        ]
      }
      {
        'begin': '(R)(""")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double quoted raw string'
        'end': '((?<=""")(")""|""")'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
        'name': 'string.quoted.double.block.raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '([uU])(""")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double quoted unicode string'
        'end': '((?<=""")(")""|""")'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
        'name': 'string.quoted.double.block.unicode.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
          '3':
            'patterns': [
              {'include': '#constant_placeholder'}
              {'include': '#escaped_unicode_char'}
              {'include': '#escaped_char'}
              {'include': '#regular_expressions'}
            ]
          '4':
            'name': 'punctuation.definition.string.end.serpent'
        'comment': 'double-quoted raw string'
        'match': '([uU]r)(")((?:[^"\\\\]|\\\\.)*)(")'
        'name': 'string.quoted.double.single-line.unicode-raw-regex.serpent'
      }
      {
        'begin': '([uU]R)(")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double-quoted raw string'
        'end': '((?<=")(")|")|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
          '3':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.double.single-line.unicode-raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
          '3':
            'patterns': [
              {'include': '#constant_placeholder'}
              {'include': '#escaped_char'}
              {'include': '#regular_expressions'}
            ]
          '4':
            'name': 'punctuation.definition.string.end.serpent'
        'comment': 'double-quoted raw string'
        'match': '(r)(")((?:[^"\\\\]|\\\\.)*)(")'
        'name': 'string.quoted.double.single-line.raw-regex.serpent'
      }
      {
        'begin': '(R)(")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double-quoted raw string'
        'end': '((?<=")(")|")|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
          '3':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.double.single-line.raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '([uU])(")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double quoted unicode string'
        'end': '((?<=")(")|")|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
          '3':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.double.single-line.unicode.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      # {
      #   'begin': '(""")(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))'
      #   'beginCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.begin.serpent'
      #   'comment': 'double quoted string'
      #   'end': '((?<=""")(")""|""")'
      #   'endCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.end.serpent'
      #     '2':
      #       'name': 'meta.empty-string.double.serpent'
      #   'name': 'string.quoted.double.block.sql.serpent'
      #   'patterns': [
      #     {
      #       'include': '#constant_placeholder'
      #     }
      #     {
      #       'include': '#escaped_char'
      #     }
      #     {
      #       'include': 'source.sql'
      #     }
      #   ]
      # }
      # {
      #   'begin': '(")(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))'
      #   'beginCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.begin.serpent'
      #   'comment': 'double quoted string'
      #   'end': '((?<=")(")|")|(\\n)'
      #   'endCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.end.serpent'
      #     '2':
      #       'name': 'meta.empty-string.double.serpent'
      #     '3':
      #       'name': 'invalid.illegal.unclosed-string.serpent'
      #   'name': 'string.quoted.double.single-line.sql.serpent'
      #   'patterns': [
      #     {
      #       'include': '#constant_placeholder'
      #     }
      #     {
      #       'include': '#escaped_char'
      #     }
      #     {
      #       'include': 'source.sql'
      #     }
      #   ]
      # }
      {
        'begin': '(""")'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double quoted string'
        'end': '((?<=""")(")""|""")'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
        'name': 'string.quoted.double.block.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '(")'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'double quoted string'
        'end': '((?<=")(")|")|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.double.serpent'
          '3':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.double.single-line.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  'string_quoted_single':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.string.begin.serpent'
          '2':
            'name': 'punctuation.definition.string.end.serpent'
          '3':
            'name': 'meta.empty-string.single.serpent'
        'match': '(?<!\')(\')((\'))(?!\')'
        'name': 'string.quoted.single.single-line.serpent'
      }
      {
        'begin': '([uU]r)(\'\'\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted unicode-raw string'
        'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.single.serpent'
        'name': 'string.quoted.single.block.unicode-raw-regex.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
          {
            'include': '#regular_expressions'
          }
        ]
      }
      {
        'begin': '([uU]R)(\'\'\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted unicode-raw string'
        'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.single.serpent'
        'name': 'string.quoted.single.block.unicode-raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '(r)(\'\'\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted raw string'
        'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.single.serpent'
        'name': 'string.quoted.single.block.raw-regex.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
          {
            'include': '#regular_expressions'
          }
        ]
      }
      {
        'begin': '(R)(\'\'\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted raw string'
        'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.single.serpent'
        'name': 'string.quoted.single.block.raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '([uU])(\'\'\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted unicode string'
        'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.single.serpent'
        'name': 'string.quoted.single.block.unicode.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
          '3':
            'patterns': [
              {'include': '#constant_placeholder'}
              {'include': '#escaped_unicode_char'}
              {'include': '#escaped_char'}
              {'include': '#regular_expressions'}
            ]
          '4':
            'name': 'punctuation.definition.string.end.serpent'
        'comment': 'single quoted raw string'
        'match': '([uU]r)(\')((?:[^\'\\\\]|\\\\.)*)(\')'
        'name': 'string.quoted.single.single-line.unicode-raw-regex.serpent'
      }
      {
        'begin': '([uU]R)(\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted raw string'
        'end': '(\')|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.single.single-line.unicode-raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
          '3':
            'patterns': [
              {'include': '#constant_placeholder'}
              {'include': '#escaped_char'}
              {'include': '#regular_expressions'}
            ]
          '4':
            'name': 'punctuation.definition.string.end.serpent'
        'comment': 'single quoted raw string'
        'match': '(r)(\')((?:[^\'\\\\]|\\\\.)*)(\')'
        'name': 'string.quoted.single.single-line.raw-regex.serpent'
      }
      {
        'begin': '(R)(\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted raw string'
        'end': '(\')|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.single.single-line.raw.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '([uU])(\')'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.serpent'
          '2':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted unicode string'
        'end': '(\')|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.single.single-line.unicode.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_unicode_char'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      # {
      #   'begin': '(\'\'\')(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))'
      #   'beginCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.begin.serpent'
      #   'comment': 'single quoted string'
      #   'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
      #   'endCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.end.serpent'
      #     '2':
      #       'name': 'meta.empty-string.single.serpent'
      #   'name': 'string.quoted.single.block.serpent'
      #   'patterns': [
      #     {
      #       'include': '#constant_placeholder'
      #     }
      #     {
      #       'include': '#escaped_char'
      #     }
      #     {
      #       'include': 'source.sql'
      #     }
      #   ]
      # }
      # {
      #   'begin': '(\')(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))'
      #   'beginCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.begin.serpent'
      #   'comment': 'single quoted string'
      #   'end': '(\')|(\\n)'
      #   'endCaptures':
      #     '1':
      #       'name': 'punctuation.definition.string.end.serpent'
      #     '2':
      #       'name': 'invalid.illegal.unclosed-string.serpent'
      #   'name': 'string.quoted.single.single-line.serpent'
      #   'patterns': [
      #     {
      #       'include': '#constant_placeholder'
      #     }
      #     {
      #       'include': '#escaped_char'
      #     }
      #     {
      #       'include': 'source.sql'
      #     }
      #   ]
      # }
      {
        'begin': '(\'\'\')'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted string'
        'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'meta.empty-string.single.serpent'
        'name': 'string.quoted.single.block.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '(\')'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.string.begin.serpent'
        'comment': 'single quoted string'
        'end': '(\')|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.serpent'
          '2':
            'name': 'invalid.illegal.unclosed-string.serpent'
        'name': 'string.quoted.single.single-line.serpent'
        'patterns': [
          {
            'include': '#constant_placeholder'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  'strings':
    'patterns': [
      {
        'include': '#string_quoted_double'
      }
      {
        'include': '#string_quoted_single'
      }
    ]
